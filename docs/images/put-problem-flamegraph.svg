<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="67380"><g><title>bench`&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (73 samples, 0.11%)</title><rect x="0.0000%" y="261" width="0.1083%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="73"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (69 samples, 0.10%)</title><rect x="0.1187%" y="245" width="0.1024%" height="15" fill="rgb(217,0,24)" fg:x="80" fg:w="69"/><text x="0.3687%" y="255.50"></text></g><g><title>bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.12%)</title><rect x="0.1083%" y="261" width="0.1187%" height="15" fill="rgb(221,193,54)" fg:x="73" fg:w="80"/><text x="0.3583%" y="271.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::i_next (72 samples, 0.11%)</title><rect x="0.2775%" y="197" width="0.1069%" height="15" fill="rgb(248,212,6)" fg:x="187" fg:w="72"/><text x="0.5275%" y="207.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::go_to_first_element_on_the_stack (68 samples, 0.10%)</title><rect x="0.2835%" y="181" width="0.1009%" height="15" fill="rgb(208,68,35)" fg:x="191" fg:w="68"/><text x="0.5335%" y="191.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::CursorImpl as bbolt_rs::cursor::CursorApi&gt;::next (80 samples, 0.12%)</title><rect x="0.2760%" y="213" width="0.1187%" height="15" fill="rgb(232,128,0)" fg:x="186" fg:w="80"/><text x="0.5260%" y="223.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::key_value (7 samples, 0.01%)</title><rect x="0.3844%" y="197" width="0.0104%" height="15" fill="rgb(207,160,47)" fg:x="259" fg:w="7"/><text x="0.6344%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 0.05%)</title><rect x="0.3963%" y="213" width="0.0519%" height="15" fill="rgb(228,23,34)" fg:x="267" fg:w="35"/><text x="0.6463%" y="223.50"></text></g><g><title>bench`bench::collect_nested_keys::_{{closure}}::_{{closure}} (142 samples, 0.21%)</title><rect x="0.2404%" y="229" width="0.2107%" height="15" fill="rgb(218,30,26)" fg:x="162" fg:w="142"/><text x="0.4904%" y="239.50"></text></g><g><title>bench`&lt;bbolt_rs::bucket::BucketImpl as bbolt_rs::bucket::BucketApi&gt;::for_each_bucket (147 samples, 0.22%)</title><rect x="0.2389%" y="245" width="0.2182%" height="15" fill="rgb(220,122,19)" fg:x="161" fg:w="147"/><text x="0.4889%" y="255.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::key_value (10 samples, 0.01%)</title><rect x="0.4794%" y="229" width="0.0148%" height="15" fill="rgb(250,228,42)" fg:x="323" fg:w="10"/><text x="0.7294%" y="239.50"></text></g><g><title>bench`bbolt_rs::bucket::BucketIApi::page_node (9 samples, 0.01%)</title><rect x="0.9320%" y="181" width="0.0134%" height="15" fill="rgb(240,193,28)" fg:x="628" fg:w="9"/><text x="1.1820%" y="191.50"></text></g><g><title>bench`bbolt_rs::common::tree::LeafPageElement::key (15 samples, 0.02%)</title><rect x="0.9454%" y="181" width="0.0223%" height="15" fill="rgb(216,20,37)" fg:x="637" fg:w="15"/><text x="1.1954%" y="191.50"></text></g><g><title>bench`bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal_or_panic (36 samples, 0.05%)</title><rect x="0.9676%" y="181" width="0.0534%" height="15" fill="rgb(206,188,39)" fg:x="652" fg:w="36"/><text x="1.2176%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (30 samples, 0.04%)</title><rect x="0.9766%" y="165" width="0.0445%" height="15" fill="rgb(217,207,13)" fg:x="658" fg:w="30"/><text x="1.2266%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (94 samples, 0.14%)</title><rect x="1.0240%" y="181" width="0.1395%" height="15" fill="rgb(231,73,38)" fg:x="690" fg:w="94"/><text x="1.2740%" y="191.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::search (333 samples, 0.49%)</title><rect x="0.6708%" y="197" width="0.4942%" height="15" fill="rgb(225,20,46)" fg:x="452" fg:w="333"/><text x="0.9208%" y="207.50"></text></g><g><title>bench`bbolt_rs::bucket::BucketIApi::page_node (7 samples, 0.01%)</title><rect x="1.1739%" y="197" width="0.0104%" height="15" fill="rgb(210,31,41)" fg:x="791" fg:w="7"/><text x="1.4239%" y="207.50"></text></g><g><title>bench`bbolt_rs::common::tree::BranchPageElement::key (53 samples, 0.08%)</title><rect x="1.1843%" y="197" width="0.0787%" height="15" fill="rgb(221,200,47)" fg:x="798" fg:w="53"/><text x="1.4343%" y="207.50"></text></g><g><title>bench`bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal_or_panic (27 samples, 0.04%)</title><rect x="1.2763%" y="197" width="0.0401%" height="15" fill="rgb(226,26,5)" fg:x="860" fg:w="27"/><text x="1.5263%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.03%)</title><rect x="1.2897%" y="181" width="0.0267%" height="15" fill="rgb(249,33,26)" fg:x="869" fg:w="18"/><text x="1.5397%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (56 samples, 0.08%)</title><rect x="1.3238%" y="197" width="0.0831%" height="15" fill="rgb(235,183,28)" fg:x="892" fg:w="56"/><text x="1.5738%" y="207.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::search (580 samples, 0.86%)</title><rect x="0.5491%" y="213" width="0.8608%" height="15" fill="rgb(221,5,38)" fg:x="370" fg:w="580"/><text x="0.7991%" y="223.50"></text></g><g><title>bench`bbolt_rs::bucket::BucketIApi::page_node (7 samples, 0.01%)</title><rect x="1.4173%" y="213" width="0.0104%" height="15" fill="rgb(247,18,42)" fg:x="955" fg:w="7"/><text x="1.6673%" y="223.50"></text></g><g><title>bench`bbolt_rs::common::tree::BranchPageElement::key (22 samples, 0.03%)</title><rect x="1.4277%" y="213" width="0.0327%" height="15" fill="rgb(241,131,45)" fg:x="962" fg:w="22"/><text x="1.6777%" y="223.50"></text></g><g><title>bench`bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal_or_panic (7 samples, 0.01%)</title><rect x="1.4604%" y="213" width="0.0104%" height="15" fill="rgb(249,31,29)" fg:x="984" fg:w="7"/><text x="1.7104%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (9 samples, 0.01%)</title><rect x="1.4708%" y="213" width="0.0134%" height="15" fill="rgb(225,111,53)" fg:x="991" fg:w="9"/><text x="1.7208%" y="223.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::search (774 samples, 1.15%)</title><rect x="0.4942%" y="229" width="1.1487%" height="15" fill="rgb(238,160,17)" fg:x="333" fg:w="774"/><text x="0.7442%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (107 samples, 0.16%)</title><rect x="1.4841%" y="213" width="0.1588%" height="15" fill="rgb(214,148,48)" fg:x="1000" fg:w="107"/><text x="1.7341%" y="223.50"></text></g><g><title>bench`bbolt_rs::tx::TxStats::inc_cursor_count (13 samples, 0.02%)</title><rect x="1.6578%" y="229" width="0.0193%" height="15" fill="rgb(232,36,49)" fg:x="1117" fg:w="13"/><text x="1.9078%" y="239.50"></text></g><g><title>bench`&lt;bbolt_rs::bucket::BucketImpl as bbolt_rs::bucket::BucketApi&gt;::get (837 samples, 1.24%)</title><rect x="0.4571%" y="245" width="1.2422%" height="15" fill="rgb(209,103,24)" fg:x="308" fg:w="837"/><text x="0.7071%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (10 samples, 0.01%)</title><rect x="1.6845%" y="229" width="0.0148%" height="15" fill="rgb(229,88,8)" fg:x="1135" fg:w="10"/><text x="1.9345%" y="239.50"></text></g><g><title>bench`&lt;bbolt_rs::tx::TxCell as bbolt_rs::common::SplitRef&lt;bbolt_rs::tx::TxR,bbolt_rs::bucket::BucketCell,bbolt_rs::tx::TxW&gt;&gt;::split_r (13 samples, 0.02%)</title><rect x="1.6993%" y="245" width="0.0193%" height="15" fill="rgb(213,181,19)" fg:x="1145" fg:w="13"/><text x="1.9493%" y="255.50"></text></g><g><title>bench`&lt;bbolt_rs::bucket::BucketCell as bbolt_rs::bucket::BucketIApi&lt;bbolt_rs::tx::TxCell&gt;&gt;::new_in (7 samples, 0.01%)</title><rect x="1.7572%" y="229" width="0.0104%" height="15" fill="rgb(254,191,54)" fg:x="1184" fg:w="7"/><text x="2.0072%" y="239.50"></text></g><g><title>bench`bbolt_rs::bucket::BucketIApi::page_node (10 samples, 0.01%)</title><rect x="1.8299%" y="213" width="0.0148%" height="15" fill="rgb(241,83,37)" fg:x="1233" fg:w="10"/><text x="2.0799%" y="223.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::search (62 samples, 0.09%)</title><rect x="1.7735%" y="229" width="0.0920%" height="15" fill="rgb(233,36,39)" fg:x="1195" fg:w="62"/><text x="2.0235%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (10 samples, 0.01%)</title><rect x="1.8507%" y="213" width="0.0148%" height="15" fill="rgb(226,3,54)" fg:x="1247" fg:w="10"/><text x="2.1007%" y="223.50"></text></g><g><title>bench`bbolt_rs::tx::TxStats::inc_cursor_count (15 samples, 0.02%)</title><rect x="1.8804%" y="229" width="0.0223%" height="15" fill="rgb(245,192,40)" fg:x="1267" fg:w="15"/><text x="2.1304%" y="239.50"></text></g><g><title>bench`bbolt_rs::bucket::BucketIApi::api_bucket (130 samples, 0.19%)</title><rect x="1.7245%" y="245" width="0.1929%" height="15" fill="rgb(238,167,29)" fg:x="1162" fg:w="130"/><text x="1.9745%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (7 samples, 0.01%)</title><rect x="1.9071%" y="229" width="0.0104%" height="15" fill="rgb(232,182,51)" fg:x="1285" fg:w="7"/><text x="2.1571%" y="239.50"></text></g><g><title>bench`&lt;bbolt_rs::db::DB as bbolt_rs::db::DbApi&gt;::view (1,147 samples, 1.70%)</title><rect x="0.2300%" y="261" width="1.7023%" height="15" fill="rgb(231,60,39)" fg:x="155" fg:w="1147"/><text x="0.4800%" y="271.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::key_value (10 samples, 0.01%)</title><rect x="2.1683%" y="229" width="0.0148%" height="15" fill="rgb(208,69,12)" fg:x="1461" fg:w="10"/><text x="2.4183%" y="239.50"></text></g><g><title>bench`bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal_or_panic (11 samples, 0.02%)</title><rect x="2.6031%" y="213" width="0.0163%" height="15" fill="rgb(235,93,37)" fg:x="1754" fg:w="11"/><text x="2.8531%" y="223.50"></text></g><g><title>bench`&lt;bbolt_rs::cursor::InnerCursor&lt;T,B&gt; as bbolt_rs::cursor::CursorIApi&gt;::search (1,038 samples, 1.54%)</title><rect x="2.1831%" y="229" width="1.5405%" height="15" fill="rgb(213,116,39)" fg:x="1471" fg:w="1038"/><text x="2.4331%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (744 samples, 1.10%)</title><rect x="2.6195%" y="213" width="1.1042%" height="15" fill="rgb(222,207,29)" fg:x="1765" fg:w="744"/><text x="2.8695%" y="223.50"></text></g><g><title>bench`bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal_or_panic (24 samples, 0.04%)</title><rect x="4.0249%" y="213" width="0.0356%" height="15" fill="rgb(206,96,30)" fg:x="2712" fg:w="24"/><text x="4.2749%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.04%)</title><rect x="4.0249%" y="197" width="0.0356%" height="15" fill="rgb(218,138,4)" fg:x="2712" fg:w="24"/><text x="4.2749%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (49 samples, 0.07%)</title><rect x="4.0606%" y="213" width="0.0727%" height="15" fill="rgb(250,191,14)" fg:x="2736" fg:w="49"/><text x="4.3106%" y="223.50"></text></g><g><title>bench`bbolt_rs::node::NodeRwCell::put (63,892 samples, 94.82%)</title><rect x="3.7385%" y="229" width="94.8234%" height="15" fill="rgb(239,60,40)" fg:x="2519" fg:w="63892"/><text x="3.9885%" y="239.50">bench`bbolt_rs::node::NodeRwCell::put</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (63,626 samples, 94.43%)</title><rect x="4.1333%" y="213" width="94.4286%" height="15" fill="rgb(206,27,48)" fg:x="2785" fg:w="63626"/><text x="4.3833%" y="223.50">libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (19 samples, 0.03%)</title><rect x="98.5619%" y="229" width="0.0282%" height="15" fill="rgb(225,35,8)" fg:x="66411" fg:w="19"/><text x="98.8119%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (31 samples, 0.05%)</title><rect x="98.5975%" y="229" width="0.0460%" height="15" fill="rgb(250,213,24)" fg:x="66435" fg:w="31"/><text x="98.8475%" y="239.50"></text></g><g><title>bench`&lt;bbolt_rs::bucket::BucketRwCell as bbolt_rs::bucket::BucketRwIApi&gt;::api_put (65,136 samples, 96.67%)</title><rect x="1.9991%" y="245" width="96.6696%" height="15" fill="rgb(247,123,22)" fg:x="1347" fg:w="65136"/><text x="2.2491%" y="255.50">bench`&lt;bbolt_rs::bucket::BucketRwCell as bbolt_rs::bucket::BucketRwIApi&gt;::api_put</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.03%)</title><rect x="98.6435%" y="229" width="0.0252%" height="15" fill="rgb(231,138,38)" fg:x="66466" fg:w="17"/><text x="98.8935%" y="239.50"></text></g><g><title>bench`&lt;bbolt_rs::node::NodeSplit as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="98.6806%" y="165" width="0.0134%" height="15" fill="rgb(231,145,46)" fg:x="66491" fg:w="9"/><text x="98.9306%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="98.6969%" y="53" width="0.0119%" height="15" fill="rgb(251,118,11)" fg:x="66502" fg:w="8"/><text x="98.9469%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="98.6969%" y="37" width="0.0119%" height="15" fill="rgb(217,147,25)" fg:x="66502" fg:w="8"/><text x="98.9469%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (9 samples, 0.01%)</title><rect x="98.6969%" y="101" width="0.0134%" height="15" fill="rgb(247,81,37)" fg:x="66502" fg:w="9"/><text x="98.9469%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (9 samples, 0.01%)</title><rect x="98.6969%" y="85" width="0.0134%" height="15" fill="rgb(209,12,38)" fg:x="66502" fg:w="9"/><text x="98.9469%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_memalign (9 samples, 0.01%)</title><rect x="98.6969%" y="69" width="0.0134%" height="15" fill="rgb(227,1,9)" fg:x="66502" fg:w="9"/><text x="98.9469%" y="79.50"></text></g><g><title>bench`__rdl_alloc_zeroed (14 samples, 0.02%)</title><rect x="98.6969%" y="117" width="0.0208%" height="15" fill="rgb(248,47,43)" fg:x="66502" fg:w="14"/><text x="98.9469%" y="127.50"></text></g><g><title>bench`&lt;bbolt_rs::common::lock::LockGuard&lt;bbolt_rs::db::DbShared&gt; as bbolt_rs::db::DbIApi&gt;::allocate (23 samples, 0.03%)</title><rect x="98.6940%" y="149" width="0.0341%" height="15" fill="rgb(221,10,30)" fg:x="66500" fg:w="23"/><text x="98.9440%" y="159.50"></text></g><g><title>bench`&lt;bbolt_rs::db::DbShared as bbolt_rs::db::DbIApi&gt;::allocate (23 samples, 0.03%)</title><rect x="98.6940%" y="133" width="0.0341%" height="15" fill="rgb(210,229,1)" fg:x="66500" fg:w="23"/><text x="98.9440%" y="143.50"></text></g><g><title>bench`&lt;bbolt_rs::tx::TxRwCell as bbolt_rs::tx::TxRwIApi&gt;::allocate (30 samples, 0.04%)</title><rect x="98.6940%" y="165" width="0.0445%" height="15" fill="rgb(222,148,37)" fg:x="66500" fg:w="30"/><text x="98.9440%" y="175.50"></text></g><g><title>bench`&lt;bbolt_rs::db::FileBackend as bbolt_rs::db::DBBackend&gt;::mmap (7 samples, 0.01%)</title><rect x="98.7281%" y="149" width="0.0104%" height="15" fill="rgb(234,67,33)" fg:x="66523" fg:w="7"/><text x="98.9781%" y="159.50"></text></g><g><title>bench`bbolt_rs::common::tree::TreePage::write_elements (50 samples, 0.07%)</title><rect x="98.7415%" y="165" width="0.0742%" height="15" fill="rgb(247,98,35)" fg:x="66532" fg:w="50"/><text x="98.9915%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (42 samples, 0.06%)</title><rect x="98.7533%" y="149" width="0.0623%" height="15" fill="rgb(247,138,52)" fg:x="66540" fg:w="42"/><text x="99.0033%" y="159.50"></text></g><g><title>bench`bbolt_rs::node::NodeRwCell::put (13 samples, 0.02%)</title><rect x="98.8157%" y="165" width="0.0193%" height="15" fill="rgb(213,79,30)" fg:x="66582" fg:w="13"/><text x="99.0657%" y="175.50"></text></g><g><title>bench`&lt;bbolt_rs::bucket::BucketRwCell as bbolt_rs::bucket::BucketRwIApi&gt;::spill (112 samples, 0.17%)</title><rect x="98.6747%" y="229" width="0.1662%" height="15" fill="rgb(246,177,23)" fg:x="66487" fg:w="112"/><text x="98.9247%" y="239.50"></text></g><g><title>bench`&lt;bbolt_rs::bucket::BucketRwCell as bbolt_rs::bucket::BucketRwIApi&gt;::spill (112 samples, 0.17%)</title><rect x="98.6747%" y="213" width="0.1662%" height="15" fill="rgb(230,62,27)" fg:x="66487" fg:w="112"/><text x="98.9247%" y="223.50"></text></g><g><title>bench`&lt;bbolt_rs::bucket::BucketRwCell as bbolt_rs::bucket::BucketRwIApi&gt;::spill (112 samples, 0.17%)</title><rect x="98.6747%" y="197" width="0.1662%" height="15" fill="rgb(216,154,8)" fg:x="66487" fg:w="112"/><text x="98.9247%" y="207.50"></text></g><g><title>bench`bbolt_rs::node::NodeRwCell::spill (112 samples, 0.17%)</title><rect x="98.6747%" y="181" width="0.1662%" height="15" fill="rgb(244,35,45)" fg:x="66487" fg:w="112"/><text x="98.9247%" y="191.50"></text></g><g><title>bench`std::fs::File::sync_all (15 samples, 0.02%)</title><rect x="98.8409%" y="213" width="0.0223%" height="15" fill="rgb(251,115,12)" fg:x="66599" fg:w="15"/><text x="99.0909%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (15 samples, 0.02%)</title><rect x="98.8409%" y="197" width="0.0223%" height="15" fill="rgb(240,54,50)" fg:x="66599" fg:w="15"/><text x="99.0909%" y="207.50"></text></g><g><title>bench`&lt;bbolt_rs::db::FileBackend as bbolt_rs::db::DBBackend&gt;::grow (16 samples, 0.02%)</title><rect x="98.8409%" y="229" width="0.0237%" height="15" fill="rgb(233,84,52)" fg:x="66599" fg:w="16"/><text x="99.0909%" y="239.50"></text></g><g><title>bench`std::io::Write::write_all (233 samples, 0.35%)</title><rect x="98.8795%" y="181" width="0.3458%" height="15" fill="rgb(207,117,47)" fg:x="66625" fg:w="233"/><text x="99.1295%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (229 samples, 0.34%)</title><rect x="98.8854%" y="165" width="0.3399%" height="15" fill="rgb(249,43,39)" fg:x="66629" fg:w="229"/><text x="99.1354%" y="175.50"></text></g><g><title>bench`&lt;bbolt_rs::common::lock::LockGuard&lt;bbolt_rs::db::DbShared&gt; as bbolt_rs::db::DbIApi&gt;::write_all_at (263 samples, 0.39%)</title><rect x="98.8736%" y="213" width="0.3903%" height="15" fill="rgb(209,38,44)" fg:x="66621" fg:w="263"/><text x="99.1236%" y="223.50"></text></g><g><title>bench`&lt;bbolt_rs::db::FileBackend as bbolt_rs::db::DBBackend&gt;::write_all_at (262 samples, 0.39%)</title><rect x="98.8750%" y="197" width="0.3888%" height="15" fill="rgb(236,212,23)" fg:x="66622" fg:w="262"/><text x="99.1250%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__lseek (26 samples, 0.04%)</title><rect x="99.2253%" y="181" width="0.0386%" height="15" fill="rgb(242,79,21)" fg:x="66858" fg:w="26"/><text x="99.4753%" y="191.50"></text></g><g><title>bench`&lt;bbolt_rs::db::FileBackend as bbolt_rs::db::DBBackend&gt;::fsync (59 samples, 0.09%)</title><rect x="99.2639%" y="213" width="0.0876%" height="15" fill="rgb(211,96,35)" fg:x="66884" fg:w="59"/><text x="99.5139%" y="223.50"></text></g><g><title>bench`std::fs::File::sync_all (59 samples, 0.09%)</title><rect x="99.2639%" y="197" width="0.0876%" height="15" fill="rgb(253,215,40)" fg:x="66884" fg:w="59"/><text x="99.5139%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (59 samples, 0.09%)</title><rect x="99.2639%" y="181" width="0.0876%" height="15" fill="rgb(211,81,21)" fg:x="66884" fg:w="59"/><text x="99.5139%" y="191.50"></text></g><g><title>bench`&lt;bbolt_rs::tx::TxRwCell as bbolt_rs::tx::TxRwIApi&gt;::write (336 samples, 0.50%)</title><rect x="98.8646%" y="229" width="0.4987%" height="15" fill="rgb(208,190,38)" fg:x="66615" fg:w="336"/><text x="99.1146%" y="239.50"></text></g><g><title>bench`core::slice::sort::merge_sort (8 samples, 0.01%)</title><rect x="99.3514%" y="213" width="0.0119%" height="15" fill="rgb(235,213,38)" fg:x="66943" fg:w="8"/><text x="99.6014%" y="223.50"></text></g><g><title>bench`&lt;bbolt_rs::tx::TxRwCell as bbolt_rs::tx::TxRwIApi&gt;::write_meta (21 samples, 0.03%)</title><rect x="99.3633%" y="229" width="0.0312%" height="15" fill="rgb(237,122,38)" fg:x="66951" fg:w="21"/><text x="99.6133%" y="239.50"></text></g><g><title>bench`&lt;bbolt_rs::db::FileBackend as bbolt_rs::db::DBBackend&gt;::fsync (21 samples, 0.03%)</title><rect x="99.3633%" y="213" width="0.0312%" height="15" fill="rgb(244,218,35)" fg:x="66951" fg:w="21"/><text x="99.6133%" y="223.50"></text></g><g><title>bench`std::fs::File::sync_all (21 samples, 0.03%)</title><rect x="99.3633%" y="197" width="0.0312%" height="15" fill="rgb(240,68,47)" fg:x="66951" fg:w="21"/><text x="99.6133%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (21 samples, 0.03%)</title><rect x="99.3633%" y="181" width="0.0312%" height="15" fill="rgb(210,16,53)" fg:x="66951" fg:w="21"/><text x="99.6133%" y="191.50"></text></g><g><title>bench`&lt;bbolt_rs::tx::TxRwImpl as bbolt_rs::tx::TxRwApi&gt;::commit (488 samples, 0.72%)</title><rect x="98.6732%" y="245" width="0.7243%" height="15" fill="rgb(235,124,12)" fg:x="66486" fg:w="488"/><text x="98.9232%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (105 samples, 0.16%)</title><rect x="99.4078%" y="245" width="0.1558%" height="15" fill="rgb(224,169,11)" fg:x="66981" fg:w="105"/><text x="99.6578%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (107 samples, 0.16%)</title><rect x="99.5637%" y="245" width="0.1588%" height="15" fill="rgb(250,166,2)" fg:x="67086" fg:w="107"/><text x="99.8137%" y="255.50"></text></g><g><title>bench`&lt;bbolt_rs::db::DB as bbolt_rs::db::DbRwAPI&gt;::update (65,903 samples, 97.81%)</title><rect x="1.9323%" y="261" width="97.8080%" height="15" fill="rgb(242,216,29)" fg:x="1302" fg:w="65903"/><text x="2.1823%" y="271.50">bench`&lt;bbolt_rs::db::DB as bbolt_rs::db::DbRwAPI&gt;::update</text></g><g><title>bench`__rdl_dealloc (7 samples, 0.01%)</title><rect x="99.7507%" y="261" width="0.0104%" height="15" fill="rgb(230,116,27)" fg:x="67212" fg:w="7"/><text x="100.0007%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.02%)</title><rect x="99.7833%" y="197" width="0.0193%" height="15" fill="rgb(228,99,48)" fg:x="67234" fg:w="13"/><text x="100.0333%" y="207.50"></text></g><g><title>bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="99.7744%" y="229" width="0.0327%" height="15" fill="rgb(253,11,6)" fg:x="67228" fg:w="22"/><text x="100.0244%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.03%)</title><rect x="99.7744%" y="213" width="0.0327%" height="15" fill="rgb(247,143,39)" fg:x="67228" fg:w="22"/><text x="100.0244%" y="223.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (30 samples, 0.04%)</title><rect x="99.7670%" y="261" width="0.0445%" height="15" fill="rgb(236,97,10)" fg:x="67223" fg:w="30"/><text x="100.0170%" y="271.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,bbolt_rs::db::DbShared&gt;&gt; (25 samples, 0.04%)</title><rect x="99.7744%" y="245" width="0.0371%" height="15" fill="rgb(233,208,19)" fg:x="67228" fg:w="25"/><text x="100.0244%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (56 samples, 0.08%)</title><rect x="99.8145%" y="261" width="0.0831%" height="15" fill="rgb(216,164,2)" fg:x="67255" fg:w="56"/><text x="100.0645%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`calloc (22 samples, 0.03%)</title><rect x="99.9110%" y="261" width="0.0327%" height="15" fill="rgb(220,129,5)" fg:x="67320" fg:w="22"/><text x="100.1610%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.01%)</title><rect x="99.9436%" y="261" width="0.0148%" height="15" fill="rgb(242,17,10)" fg:x="67342" fg:w="10"/><text x="100.1936%" y="271.50"></text></g><g><title>bench`bench::main (67,354 samples, 99.96%)</title><rect x="0.0000%" y="277" width="99.9614%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="67354"/><text x="0.2500%" y="287.50">bench`bench::main</text></g><g><title>bench`main (67,365 samples, 99.98%)</title><rect x="0.0000%" y="341" width="99.9777%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="67365"/><text x="0.2500%" y="351.50">bench`main</text></g><g><title>bench`std::rt::lang_start_internal (67,365 samples, 99.98%)</title><rect x="0.0000%" y="325" width="99.9777%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="67365"/><text x="0.2500%" y="335.50">bench`std::rt::lang_start_internal</text></g><g><title>bench`std::rt::lang_start::_{{closure}} (67,365 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9777%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="67365"/><text x="0.2500%" y="319.50">bench`std::rt::lang_start::_{{closure}}</text></g><g><title>bench`std::sys_common::backtrace::__rust_begin_short_backtrace (67,365 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9777%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="67365"/><text x="0.2500%" y="303.50">bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_kernel.dylib`__close_nocancel (11 samples, 0.02%)</title><rect x="99.9614%" y="277" width="0.0163%" height="15" fill="rgb(244,5,23)" fg:x="67354" fg:w="11"/><text x="100.2114%" y="287.50"></text></g><g><title>dyld`start (67,369 samples, 99.98%)</title><rect x="0.0000%" y="357" width="99.9837%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="67369"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>all (67,380 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="67380"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__exit (11 samples, 0.02%)</title><rect x="99.9837%" y="357" width="0.0163%" height="15" fill="rgb(212,68,19)" fg:x="67369" fg:w="11"/><text x="100.2337%" y="367.50"></text></g></svg></svg>